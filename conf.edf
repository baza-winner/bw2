
${
  . Func -> Any // current node
  .. Func{
    of Any
    up Int{range 1.. default 1 }
  } -> [Array Map] // parent node

  Key Func{of Any} -> String
  Idx Func{of Any} -> Int

  \| Func{lhs Map key String} -> Any
  \| Func{lhs Array idx Int} -> Any
  \| Func{lhs Any def Def:Def} -> Any
  \| Func{lhs Any func Any} -> Any

  \+ Func{[lhs rhs] Int} -> Int
  \+ Func{lhs Number rhs Number} -> Number
  \- Func{[lhs rhs] Int} -> Int
  \- Func{lhs Int rhs Number} -> Number

  \- Func{lhs Number rhs Int} -> Number
  \- Func{lhs Number rhs Number} -> Number

  \== Func{lhs Null rhs Int} -> Bool
  \== Func{lhs Int rhs Null} -> Bool

  \== Func{lhs Null rhs Number} -> Bool
  \== Func{lhs Number rhs Null} -> Bool

  \== Func{lhs Null rhs Null} -> Bool

  \== Func{lhs Int rhs Int} -> Bool
  \== Func{lhs Number rhs Number} -> Bool
}

// $.{} -> ^Any // current node
// $..{
//   of Any
//   up Int{
//     range 1..
//     default 1
//   }
// } -> ^[Array Map] // parent node

// $Key{ of Any } -> ^[String Null]
// $Idx{ of Any } -> ^[Int Null]
// $ElemOf{ key String } -> Any
// $ElemOf{ idx Int } -> Any

// $Key{ _of Any } -> ^{ type [String Null] }

$portRange = 1024..65535

$portDef{
  isOptional Bool{
    default false
  }
} = Def:Int{
  range $portRange
  isOptional $isOptional
}

$portsDef = Def:Map{
  elemDef $portDef
}

$ports = {
  ports $portsDef
}

// !github -> github.com:baza-winner
// !gitExt = .git
// !gitOrigin = \($github)/\(*..|projName)\($gitExt)
// !gitOrigin = github.com:baza-winner/\(*..|projName).git

$projectsDef = Def:Map{
  elemDef {
    type Map
    keysDef {
      projShortcut String{
        default $.|$..|$Key|!
      }
      gitOrigin String{
        default github.com:baza-winner/\< $..|projName >.git
      }
      branch String{
        default develop
      }
    }
  }
}

$servicesDef = Def:Map{
  elemDef Map{
    keysDef $ports
  }
  keysDef {
    nginx Map{
      keysDef {
        $ports...
        upstream $portDef{isOptional true}
      }
    }
  }
}

$Def Map{
  keysDef {
    portRange Range
    projects $projectsDef
    services $servicesDef
  }
}

// !key{_node Any} => $_node|$Key

$portsGen{node String} => Gen:Map{
  (
    $node|$key == "_" ?
      $node|$Key :
      $node|..|..|$Key
  ) => $node
}

// $ports{_services Map} => $_services|[][ports][]$portsGen

// $ports = {
//   ports $Ref(services)|[][ports][]Map{
//     (
//       $_|$Key == "_" ? $Key($_) :
//         $_|$..(2)|$Key
//     ) => $_
//   }
// }

{
  portRange $portRange
  projects {
    dip {
      projName dip2
    }
    agate {
      projName agate
    }
  }
  services {
    ssh {
      ports {
        _ 2200
      }
    }
    nginx {
      ports {
        http 8000
        https 4400
      }
      upstream 3000
    }
    mysql {
      ports {
        _ 3300
      }
    }
    redis {
      ports {
        _ 6300
        webdis 7300
      }
    }
    rabbitmq {
      ports {
        _ 5600
        rabbitmq-management 15600
      }
    }
  }
  ports $Ref(services)|[][ports][]Map{
    (
      $_|$Key == "_" ? $Key($_) :
        $_|$..(2)|$Key
    ) => $_
  }
  // $ports...
}
